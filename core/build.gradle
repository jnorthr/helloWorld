// /Users/jimnorthrop/Dropbox/Projects/helloWorld/core/build.gradle
apply plugin: 'groovy'

defaultTasks 'clean','build','test','fatJar','copyJarToTemplate', 'copyJarToDownload', 'copyJarToWeb', 'runJob'

ext.mainClassName = "org.jnorthr.hello.Fred";
ext.deploy = false
//targetCompatibility = '1.8'
//sourceCompatibility = '1.8'

task say {println "say core in ${projectDir}"}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.8'
	implementation 'org.slf4j:slf4j-api:1.7.25'

    // read: https://www.petrikainulainen.net/programming/testing/writing-unit-tests-with-spock-framework-creating-a-gradle-project/
    testImplementation(
            'junit:junit:4.13.2',
            'org.codehaus.groovy:groovy-all:3.0.8',
			'org.slf4j:slf4j-api:1.7.25',
            'org.spockframework:spock-core:2.0-groovy-3.0'
    )
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

task runJob(type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    args = ["jnorthr"]
}

/* make our uber jar with all needed dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
*/

jar {
    manifest {
        attributes("Main-Class": mainClassName )
    }
}


// copy built jar to template dir
task copyJarToTemplate(type: Copy) {
    from jar  //'build/libs/core-1.4.jar'  //from createJar // shortcut for createJar.outputs.files
    into "${projectDir}/../template/lib"
} 

/* copy built jar to template dir
task copyJarToWeb(type: Copy) {
    from fatJar  //'build/libs/core-all-*.jar'  //from createJar // shortcut for createJar.outputs.files
    into "${projectDir}/../website/lib"
} 
*/

test {
    testLogging {
        // Make sure output from standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
    }
}
